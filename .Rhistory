levels(gdp3$X.1)
?read.csv
gdpdata <- read.csv('gdpdata.csv', skip = 4, as.is = TRUE)
head(gdpdata)
gdpdata[191]
gdpdata[191,]
gdp2 <- gdpdata[1:190,]
tail(gdp2)
head(as.numeric(gdp2$X.1))
gdp2$X.1 <- as.numeric(gdp2$X.1)
arrange(gdp2, X.1)
stringsAsFactors
edudata <- read.csv('edudata.csv', as.is = TRUE)
mergeddata <- merge(gdp2, edudata, by.x = 'X.1', by.y = 'CountryCode')
edudata$CountryCode
gdp2$X.1
gdp2$X
mergeddata <- merge(gdp2, edudata, by.x = 'X', by.y = 'CountryCode')
head(edudata)
?subset
highoecd <- subset(mergeddata, Income.Group == 'High income: OECD')
highnonoecd <- subset(mergeddata, Income.Group == 'High income: nonOECD')
highoecd$X.1
mean(highoecd$X.1)
mean(highnonoecd$X.1)
189/5
?quantile
?ddply
dim(mergeddata$X.1)
mergeddata$X.1
dim(as.numeric(mergeddata$X.1))
str(mergeddata$X.1)
arrange(mergeddata, X.1)
head(mergeddata$X.1)
arrangeddata <- arrange(mergeddata, X.1)
head(arrangeddata$X.1)
topquintile <- arrangeddata[1:38,]
topquintile$Income.Group
topquintile$Income.Group == 'Lower middle income'
as.integer(topquintile$Income.Group == 'Lower middle income')
sum(as.integer(topquintile$Income.Group == 'Lower middle income'))
?merge
?arrange
arrange(gdp2, desc(X.1))
q()
?print
q()
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv','microdataidaho.csv',method='curl')
data <- read.csv('microdataidaho.csv')
head(data)
names(data)
?strsplit
stuff <- strsplit(names(data),'wgtp')
stuff[123]
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv','gdpdata.csv',method='curl')
getwd()
getwd()
setwd("~/github/GettingCleaningPeerAssessment")
source('run_analysis.R')
getdata()
data <- getdata()
labels <- read.table('UCI HAR Dataset//features.txt')
dim(data)
head(data)
train <- read.table('UCI HAR Dataset/train/X_train.txt')
train_labels <- read.table('UCI HAR Dataset/train/y_train.txt')
train <- cbind(train, train_labels)
colnames(train) <- cbind(labels, 'labels')
head(train)
train <- read.table('UCI HAR Dataset/train/X_train.txt')
?append
head(labels)
head(labels[,2])
colnames(train) <- labels[,2]
head(train)
labels2 <- c(labels[,2],'Activity')
labels2 <- c(labels[,1],'Activity')
labels2 <- c(labels[,2],'Activity')
options(StringsAsFactors)
options()
options(StringsAsFactors = False)
options(StringsAsFactors = FALSE)
options()
options(stringsAsFactors = FALSE)
options()
labels <- read.table('UCI HAR Dataset//features.txt')
labels2 <- c(labels[,2],'Activity')
train <- cbind(train, train_labels)
colnames(train) <- labels
head(train)
colnames(train) <- labels2
head(train)
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
# Load labels
labels <- read.table('UCI HAR Dataset//features.txt')
labels <- c(labels[,2], 'Activity')
# Load train data, merge with activities and label data set
train <- read.table('UCI HAR Dataset/train/X_train.txt')
train_activities <- read.table('UCI HAR Dataset/train/y_train.txt')
train <- cbind(train, train_activities)
colnames(train) <- labels
# Load test data, merge with activities and label data set
test <- read.table('UCI HAR Dataset/test/X_test.txt')
test_activities <- read.table('UCI HAR Dataset/test/y_test.txt')
test <- cbind(test, test_activities)
colnames(test) <- labels
mergeddata <- merge(test, train)
mergeddata <- append(test, train)
mergeddata <- rbind(test, train)
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
head(labels)
?grep
grep(mean, labels)
grep('mean', labels)
grep('std', labels)
grep('mean', mergeddata)
grep('mean|std',labels)
mergeddata[1,]
head(mergeddata[,1])
filtereddata <- mergeddata[, grep('mean|std', labels)]
length(grep('mean|std',labels))
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
act_labels <- read.table('UCI HAR Dataset/activity_labels.txt')
head(filtereddata[, -1])
head(filtereddata[-1,])
head(filtereddata[, 562])
train_activities <- read.table('UCI HAR Dataset/train/y_train.txt')
head(train_activities)
head(act_labels)
merge(train_activities, act_labels, by.x = V1, by.y = V2)
bla <- merge(train_activities, act_labels, by.x = 'V1', by.y = 'V2')
bla <- merge(train_activities, act_labels, by.x = 'V1', by.y = 'V1')
head(bla)
bla
head(act_labels)
?merge
bla <- merge(train_activities, act_labels, by.x = 'V1', by.y = 'V1', sort = FALSE)
head(bla)
train_activities <- merge(train_activities, act_labels, by.x = 'V1', by.y = 'V1', sort = FALSE)
head(train_activities[, 2])
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
data <- getdata()
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
data <- getdata()
head(data)
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
data <- getdata()
colnames(data)
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
?grep
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
data <- getdata()
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
data <- getdata()
head(filtereddata)
head(data)
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
data <- getdata()
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
act_labels <- read.table('UCI HAR Dataset/activity_labels.txt')
act_labels[, 2]
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
tidydata(act_labels)
10299/30
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
data <- getdata()
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
test_activities <- read.table('UCI HAR Dataset/test/y_test.txt')
levels(test_activities)
?unique
unique(test_activities)
unique(data$Activity)
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
unique(data$Subject)
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
tidydata(data)
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
tidydata(data)
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
tidydata(data)
?mean
?colmeans
?colMeans
subject <- 1
activity <- 'LAYING'
?subset
subset(data, Subject == subject & Activity = activity)
subset(data, Subject == subject & Activity == activity)
bla <- subset(data, Subject == subject & Activity == activity)
bla <- subset(data, Subject == 1 & Activity == 'LAYING')
bla <- subset(data, Subject == 2 & Activity == 'LAYING')
bla <- subset(data, Subject == 2)
bla <- subset(data, Subject == 2 && Activity == 'LAYING')
bla <- subset(data, Activity == 'LAYING')
bla <- subset(data, Subject == 2 && Activity == 'LAYING')
bla <- subset(data, Subject == 2 && Activity == 'WALKING')
bla <- subset(data, Activity == 'WALKING')
bla <- subset(data, Subject == 2)
bla
bla <- subset(data, Subject == 2 && Activity == 'STANDING')
bla <- subset(data, (Subject == 2) && (Activity == 'STANDING'))
bla <- subset(data, (Subject == 2) & (Activity == 'STANDING'))
bla
bla <- subset(data, (Subject == subject) & (Activity == activity))
subject <- 2
activity <- 'STANDING'
bla <- subset(data, (Subject == subject) & (Activity == activity))
colMeans(bla)
as.numeric(bla)
head(bla)
head(bla[1:66])
head(bla[1:68])
head(bla[1:Length(bla)-2])
length(bla)
head(bla[1:length(bla)-2])
head(bla[1:(length(bla)-2)])
colMeans(head(bla[1:(length(bla)-2)]))
colMeans(bla[1:(length(bla)-2)])
colMeans(bla[, !(names(bla) %in% c('Activity', 'Subject'))])
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
?colMeans
library(dplyr)
install.packages("dplyr")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library('dplyr')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
?group.by
?group_by
bla <- group_by(data, Activity)
colMeans(bla)
colMeans(bla[1:66])
head(bla)
bla <- group_by(data, Subject, Activity)
bla
?summarise
summarise(bla)
summarise(bla, mean(tBodyAccMag-mean()))
summarise(bla, mean('tBodyAccMag-mean()'))
summarise(bla, tBodyAccMag-mean())
summarise(bla, 'tBodyAccMag-mean()')
data %.% group_by(Subject, Activity) %.% summarise(test = mean(tGravityAcc-mean\(\)-X))
data %.% group_by(Subject, Activity) %.% summarise(test = mean(tGravityAcc-mean\\(\\)-X))
data %.% group_by(Subject, Activity) %.% summarise(test = mean(tGravityAcc-mean()-X))
?gsub
gsub('\\(\\)', '', colnames(data))
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
data <- getdata()
colnames(data)
data %.% group_by(Subject, Activity) %.% summarise(test = mean(fBodyAcc-mean-X))
data %.% group_by(Subject, Activity) %.% summarise(test = mean('fBodyAcc-mean-X'))
warnings()
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
data <- getdata()
data %.% group_by(Subject, Activity) %.% summarise(test = mean('fBodyAcc_mean_X'))
data %.% group_by(Subject, Activity) %.% summarise(test = mean(fBodyAcc_mean_X))
x <- colnames(data)
labelcols <- c('Activity', 'Subject')
x[x!=labelcols]
bla <- data %.% group_by(Subject, Activity) %.% select(-(Subject, Activity))
bla <- data %.% group_by(Subject, Activity) %.% select(-(Subject:Activity))
bla <- data %.% group_by(Subject, Activity) %.% summarise(mean)
measurecols <- colnames(data)[colnames(data)!=labelcols]
dots <- sapply(cols ,function(x) substitute(mean(x), list(x=as.name(x))))
cols <- bla
cols <- measurecols
dots <- sapply(cols ,function(x) substitute(mean(x), list(x=as.name(x))))
dots
data %.% group_by(Subject, Activity) %.% summarise(dots)
grouped_data <- data %.% group_by(Subject, Activity)
do.call(summarise, c(list(.data=grouped_data), dots))
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
tidy <- tidydata(data)
tidy
?write.csv
write.table(tidydata, file = 'tidydata.txt')
write.table(tidy, file = 'tidydata.txt')
write.csv(tidy, file = 'tidydata.txt')
write.csv(tidy, file = 'tidydata.csv')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
head(tidy)
write.table(tidy, file = 'tidydata.txt')
q()
source('~/github/GettingCleaningPeerAssessment/run_analysis.R')
q()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?nlme
?BodyWeight
?xyplot
head(BodyWeight)
levels(BodyWeight$Diet)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?lpoints
?axis
?points
?lines
?lpoints
?trellist.par.set
?trellis.par.set
?splom
?print.trellis
q()
?qplot
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?qplot
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
?ggplot
setwd("~/github/RepData_PeerAssessment1")
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
?qplot
qplot(votes, rating, data = movies) + geom_smooth()
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
q()
?rnorm
mu <- 15; sigma <- 10; n <- 100
sqrt(n)
pnorm(15, mean = mu, sd = sigma/sqrt(n))
pnorm(17.5, mean = mu, sd = sigma/sqrt(n))
pnorm(16, mean = mu, sd = sigma/sqrt(n))
qnorm(16, mean = mu, sd = sigma/sqrt(n))
qnorm(15, mean = mu, sd = sigma/sqrt(n))
pnorm(16, mean = mu, sd = sigma/sqrt(n))
pnorm(100, mean = mu, sd = sigma/sqrt(n))
pnorm(15, mean = mu, sd = sigma/sqrt(n))
sigma/sqrt(n)
pnorm(16, mean = mu, sd = sigma/sqrt(n))
pnorm(16, mean = mu, sd = sigma/sqrt(n)) - pnorm(14, mean = mu, sd = sigma/sqrt(n))
6/32
q()
library('plyr')
rawdata <- read.csv('activity.csv')
dailysteps <- ddply(rawdata, ~date, summarise, total=sum(steps))
intervalsteps <- ddply(rawdata, ~interval, summarise,
mean=mean(steps, na.rm=TRUE))
?is.na
is.na(rawdata)
sum(is.na(rawdata))
head(dailysteps)
str(dailysteps$date)
?read.csv
rawdata <- read.csv('activity.csv', stringsAsFactors = False())
rawdata <- read.csv('activity.csv', stringsAsFactors = FALSE)
?date.POSIXct
str(rawdata$Date)
dailysteps <- ddply(rawdata, ~date, summarise, total=sum(steps))
head(dailysteps)
head(rawdata)
rawdata
?strptime
dates <- strptime(paste(rawdata$date), format = "%d-%m-%Y")
head(dates)
dates <- strptime(paste(rawdata$date), format = "%Y-%m-%d")
head(dates)
rawdata$date <- dates
str(rawdata$date)
?wday
head(weekdays(dates))
?complete.cases
complete.cases(rawdata)
nrow(rawdata)
nrow(rawdata) - nrow(na.omit(rawdata))
head(intervalsteps)
intervalsteps <- ddply(rawdata, ~interval, summarise,
mean=mean(steps, na.rm=TRUE),
median=median(steps, na.rm=TRUE))
?na.omit
?subset
nrow(subset(rawdata, is.na = TRUE))
nrow(subset(rawdata, is.na = FALSE))
nrow(!is.na(rawdata))
nrow(is.na(rawdata))
nrow(!is.na(rawdata$steps))
nrow(is.na(rawdata$steps))
is.na(rawdata)
sum(is.na(rawdata$steps))
nas <- is.na(rawdata$steps)
head(intervalsteps)
?merge
head(rawdata)
imputeddata <- merge(rawdata, intervalsteps, by.x=interval, by.y=interval)
imputeddata <- merge(rawdata, intervalsteps, by.x='interval', by.y='interval')
head(imputeddata)
View(imputeddata)
?clear
?Clear
rawdata$steps[is.na(rawdata$steps)]
head(imputeddata$steps)
head(imputeddata$steps[is.na(imputeddata$steps)])
head(imputeddata)
imputeddata$steps[is.na(imputeddata$steps)] <- imputeddata$mean[is.na(imputeddata$steps)]
head(imputeddata$steps)
imputeddata <- imputeddata[imputeddata <- merge(rawdata, intervalsteps, by.x='interval', by.y='interval')
# This replaces all missing step values by their time interval means
imputeddata$steps[is.na(imputeddata$steps)] <-
imputeddata$mean[is.na(imputeddata$steps)]
# Now we drop the time interval means in the imputed data frame again.
imputeddata <- imputeddata[,!names(imputeddata) == 'mean']]
imputeddata <- merge(rawdata, intervalsteps, by.x='interval', by.y='interval')
# This replaces all missing step values by their time interval means
imputeddata$steps[is.na(imputeddata$steps)] <-
imputeddata$mean[is.na(imputeddata$steps)]
# Now we drop the time interval means in the imputed data frame again.
imputeddata <- imputeddata[,!names(imputeddata) == 'mean']
head(imputeddata)
imputeddata <- imputeddata[,!names(imputeddata) == 'median']
imp_dailysteps <- ddply(imputeddata, ~date, summarise, total=sum(steps))
head(dailysteps)
head(imp_dailysteps)
dailysteps[is.na(dailysteps$total)]
dailysteps$total[is.na(dailysteps$total)]
?sum
dailysteps$total[is.na(dailysteps$total)]
rawdata <- read.csv('activity.csv', stringsAsFactors = FALSE)
dates <- strptime(paste(rawdata$date), format = "%Y-%m-%d")
rawdata$date <- dates
dailysteps <- ddply(rawdata, ~date, summarise, total=sum(steps))
intervalsteps <- ddply(rawdata, ~interval, summarise,
mean=mean(steps, na.rm=TRUE))
imputeddata <- merge(rawdata, intervalsteps, by.x='interval', by.y='interval')
# This replaces all missing step values by their time interval means
imputeddata$steps[is.na(imputeddata$steps)] <-
imputeddata$mean[is.na(imputeddata$steps)]
# Now we drop the time interval means in the imputed data frame again.
imputeddata <- imputeddata[,!names(imputeddata) == 'mean']
# Compute new daily and minute-interval summaries
imp_dailysteps <- ddply(imputeddata, ~date, summarise,
total=sum(steps, na.rm=TRUE))
imp_intervalsteps <- ddply(imputeddata, ~interval, summarise,
mean=mean(steps, na.rm=TRUE))
head(dailysteps)
head(imp_dailysteps)
tail(dailysteps)
tail(imp_dailysteps)
head(weekdays(imp_dailysteps$date))
head(weekdays(imp_dailysteps$date) %in% c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'))
weekdays <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
is_weekday <- weekdays(imp_dailysteps$date)) %in% weekdays
imputeddata <- cbind(imputeddata, is_weekday)
weekdays <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
is_weekday <- weekdays(imp_dailysteps$date) %in% weekdays
imputeddata <- cbind(imputeddata, is_weekday)
head(imputeddata)
?ddply
imp_wday_intervalsteps <- ddply(rawdata, ~(interval, is_weekday), summarise,
mean=mean(steps))
imp_wday_intervalsteps <- ddply(rawdata, .(interval, is_weekday), summarise,
mean=mean(steps))
head(imp_wday_intervalsteps)
head(imp_wday_intervalsteps)
imp_wday_intervalsteps <- ddply(imputeddata, .(interval, is_weekday),
summarise, mean=mean(steps))
head(imp_wday_intervalsteps)
library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
xyplot(mean ~ interval, data = imp_wday_intervalsteps)
xyplot(mean ~ interval | is_weekday, data = imp_wday_intervalsteps)
xyplot(mean ~ interval | is_weekday, data = imp_wday_intervalsteps, type = 'l')
?if
q
is_weekday <- weekdays(imp_dailysteps$date) %in% weekdays
is_weekday[is_weekday] <- 'Weekday'
is_weekday[!is_weekday] <- 'Weekend'
is_weekday <- weekdays(imp_dailysteps$date) %in% weekdays
is_weekday[is_weekday] <- 'Weekday'
is_weekday[!'Weekday'] <- 'Weekend'
is_weekday <- weekdays(imp_dailysteps$date) %in% weekdays
is_weekday[is_weekday] <- 'Weekday'
is_weekday[is_weekday != 'Weekday'] <- 'Weekend'
head(is_weekday)
q()
